package proiect;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.List;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.SheetsScopes;

class Google {
	private static final List<String> SCOPES = Collections
			.singletonList(SheetsScopes.SPREADSHEETS);
	private static final JsonFactory JSON_FACTORY = JacksonFactory
			.getDefaultInstance();
	private static final String CREDENTIALS_FILE_PATH = "/credentials.json";
	private static final String TOKENS_DIRECTORY_PATH = "tokens";
	private static final String APPLICATION_NAME = "PIP-pr";

	protected static Credential getCredentials() throws IOException,
			GeneralSecurityException {
		// Skip errors generated by google.
		final java.util.logging.Logger buggyLogger = java.util.logging.Logger
				.getLogger(FileDataStoreFactory.class.getName());
		buggyLogger.setLevel(java.util.logging.Level.SEVERE);

		// Load client secrets.
		InputStream in = PresenceUpdater.class
				.getResourceAsStream(CREDENTIALS_FILE_PATH);
		GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(
				JSON_FACTORY, new InputStreamReader(in));

		// Build flow and trigger user authorization request.
		GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
				GoogleNetHttpTransport.newTrustedTransport(), JSON_FACTORY,
				clientSecrets, SCOPES)
				.setDataStoreFactory(
						new FileDataStoreFactory(new java.io.File(
								TOKENS_DIRECTORY_PATH)))
				.setAccessType("offline").build();

		Credential credential = new AuthorizationCodeInstalledApp(flow,
				new LocalServerReceiver()).authorize("user");

		return credential;
	}

	protected static Sheets getSheetsService(Credential credential)
			throws IOException, GeneralSecurityException {
		// Build a new authorized API client service.
		return new Sheets.Builder(GoogleNetHttpTransport.newTrustedTransport(),
				JSON_FACTORY, credential).setApplicationName(APPLICATION_NAME)
				.build();
	}
}